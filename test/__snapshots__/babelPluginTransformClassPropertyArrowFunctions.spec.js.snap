// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babelPluginTransformClassPropertyArrowFunctions it does not alter class properties assigned to things other than arrow functions: it does not alter class properties assigned to things other than arrow functions 1`] = `
"
class A {
  constructor() {}

  a = 1;

  b = someFunction();
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class A {
  constructor() {
    _defineProperty(this, \\"a\\", 1);

    _defineProperty(this, \\"b\\", someFunction());
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles a typical React-style class with a constructor: it handles a typical React-style class with a constructor 1`] = `
"
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      total: 0
    };
  }

  addOne = () => {
    this.setState(({ total: oldTotal }) => ({ total: oldTotal + 1 }));
  }

  subtractOne = () => {
    this.setState(({ total: oldTotal }) => ({ total: oldTotal - 1 }));
  }

  double = () => {
    this.setState(({ total: oldTotal }) => ({ total: oldTotal * 2 }));
  }

  halve = () => {
    this.setState(({ total: oldTotal }) => ({ total: oldTotal / 2 }));
  }

  render() {
    return React.createElement(SomeComponent, { addOne, subtractOne, double, halve });
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      total: 0
    };
    this.addOne = this.addOne.bind(this);
    this.subtractOne = this.subtractOne.bind(this);
    this.double = this.double.bind(this);
    this.halve = this.halve.bind(this);
  }

  addOne() {
    this.setState(({
      total: oldTotal
    }) => ({
      total: oldTotal + 1
    }));
  }

  subtractOne() {
    this.setState(({
      total: oldTotal
    }) => ({
      total: oldTotal - 1
    }));
  }

  double() {
    this.setState(({
      total: oldTotal
    }) => ({
      total: oldTotal * 2
    }));
  }

  halve() {
    this.setState(({
      total: oldTotal
    }) => ({
      total: oldTotal / 2
    }));
  }

  render() {
    return React.createElement(SomeComponent, {
      addOne,
      subtractOne,
      double,
      halve
    });
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles a typical React-style class without a constructor: it handles a typical React-style class without a constructor 1`] = `
"
class App extends React.Component {
  addOne = () => {
    this.props.addOne();
  }

  subtractOne = () => {
    this.props.subtractOne();
  }

  double = () => {
    this.props.double();
  }

  halve = () => {
    this.props.halve();
  }

  render() {
    return React.createElement(SomeComponent, { addOne, subtractOne, double, halve });
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class App extends React.Component {
  constructor() {
    this.addOne = this.addOne.bind(this);
    this.subtractOne = this.subtractOne.bind(this);
    this.double = this.double.bind(this);
    this.halve = this.halve.bind(this);
  }

  addOne() {
    this.props.addOne();
  }

  subtractOne() {
    this.props.subtractOne();
  }

  double() {
    this.props.double();
  }

  halve() {
    this.props.halve();
  }

  render() {
    return React.createElement(SomeComponent, {
      addOne,
      subtractOne,
      double,
      halve
    });
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles arrow functions when passed a variety of class property assignment types: it handles arrow functions when passed a variety of class property assignment types 1`] = `
"
class A {
  constructor() {}

  a = 1;

  b = someFunction();

  c = () => {
    return 'hi';
  }

  d = 'd';
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class A {
  constructor() {
    _defineProperty(this, \\"a\\", 1);

    _defineProperty(this, \\"b\\", someFunction());

    _defineProperty(this, \\"d\\", 'd');

    this.c = this.c.bind(this);
  }

  c() {
    return 'hi';
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with a single parameter assigned to a function returning a void-returning block is provided in a class without a constructor: it handles scenarios where a class property with a single parameter assigned to a function returning a void-returning block is provided in a class without a constructor 1`] = `
"
class A {
  a = parameterOne => {
    console.log('hi');
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne) {
    console.log('hi');
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with a single parameter assigned to a function returning an empty block is provided in a class without a constructor: it handles scenarios where a class property with a single parameter assigned to a function returning an empty block is provided in a class without a constructor 1`] = `
"
class A {
  a = parameterOne => {};
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne) {}

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with a single parameter assigned to a function returning an explicit return is provided in a class with a constructor: it handles scenarios where a class property with a single parameter assigned to a function returning an explicit return is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = parameterOne => {
    const value = 1 + 2;
    return value;
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne) {
    const value = 1 + 2;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with a single parameter assigned to a function returning an explicit return is provided in a class without a constructor: it handles scenarios where a class property with a single parameter assigned to a function returning an explicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = parameterOne => {
    const value = 1 + 2;
    return value;
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne) {
    const value = 1 + 2;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with a single parameter assigned to a function returning an implicit return is provided in a class without a constructor: it handles scenarios where a class property with a single parameter assigned to a function returning an implicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = parameterOne => parameterOne;
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne) {
    return parameterOne;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with multiple parameters assigned to a function returning a void-returning block is provided in a class without a constructor: it handles scenarios where a class property with multiple parameters assigned to a function returning a void-returning block is provided in a class without a constructor 1`] = `
"
class A {
  a = (parameterOne, parameterTwo) => {
    console.log('hi');
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne, parameterTwo) {
    console.log('hi');
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with multiple parameters assigned to a function returning an empty block is provided in a class without a constructor: it handles scenarios where a class property with multiple parameters assigned to a function returning an empty block is provided in a class without a constructor 1`] = `
"
class A {
  a = (parameterOne, parameterTwo) => {};
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne, parameterTwo) {}

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with multiple parameters assigned to a function returning an explicit return is provided in a class with a constructor: it handles scenarios where a class property with multiple parameters assigned to a function returning an explicit return is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = (parameterOne, parameterTwo) => {
    const value = 1 + 2;
    return value;
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne, parameterTwo) {
    const value = 1 + 2;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with multiple parameters assigned to a function returning an explicit return is provided in a class without a constructor: it handles scenarios where a class property with multiple parameters assigned to a function returning an explicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = (parameterOne, parameterTwo) => {
    const value = 1 + 2;
    return value;
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne, parameterTwo) {
    const value = 1 + 2;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property with multiple parameters assigned to a function returning an implicit return is provided in a class without a constructor: it handles scenarios where a class property with multiple parameters assigned to a function returning an implicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = (parameterOne, parameterTwo) => parameterTwo;
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a(parameterOne, parameterTwo) {
    return parameterTwo;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning a void-returning block is provided in a class with a constructor: it handles scenarios where a class property without parameters assigned to a function returning a void-returning block is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = () => {
    console.log('hi');
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {
    console.log('hi');
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning a void-returning block is provided in a class without a constructor: it handles scenarios where a class property without parameters assigned to a function returning a void-returning block is provided in a class without a constructor 1`] = `
"
class A {
  a = () => {
    console.log('hi');
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {
    console.log('hi');
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning an empty block is provided in a class with a constructor: it handles scenarios where a class property without parameters assigned to a function returning an empty block is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = () => {};
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {}

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning an empty block is provided in a class without a constructor: it handles scenarios where a class property without parameters assigned to a function returning an empty block is provided in a class without a constructor 1`] = `
"
class A {
  a = () => {};
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {}

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning an explicit return is provided in a class with a constructor: it handles scenarios where a class property without parameters assigned to a function returning an explicit return is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = () => {
    const value = 1 + 2;
    return value;
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {
    const value = 1 + 2;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning an explicit return is provided in a class with a constructor: it handles scenarios where a class property without parameters assigned to a function returning an explicit return is provided in a class with a constructor 2`] = `
"
class A {
  constructor() {}

  a = () => {
    const value = 1 + 2;
    return value;
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {
    const value = 1 + 2;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning an explicit return is provided in a class without a constructor: it handles scenarios where a class property without parameters assigned to a function returning an explicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = () => {
    const value = 1 + 2;
    return value;
  };
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {
    const value = 1 + 2;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning an implicit return is provided in a class with a constructor: it handles scenarios where a class property without parameters assigned to a function returning an implicit return is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = () => 1;
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {
    return 1;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where a class property without parameters assigned to a function returning an implicit return is provided in a class without a constructor: it handles scenarios where a class property without parameters assigned to a function returning an implicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = () => 1;
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
  }

  a() {
    return 1;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with a single parameter assigned to a function returning a void-returning block is provided in a class without a constructor: it handles scenarios where multiple class properties with a single parameter assigned to a function returning a void-returning block is provided in a class without a constructor 1`] = `
"
class A {
  a = parameterOne => {
    console.log('hi');
  };

  b = parameterOne => {
    console.log('hi again');
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne) {
    console.log('hi');
  }

  b(parameterOne) {
    console.log('hi again');
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with a single parameter assigned to a function returning an empty block is provided in a class without a constructor: it handles scenarios where multiple class properties with a single parameter assigned to a function returning an empty block is provided in a class without a constructor 1`] = `
"
class A {
  a = parameterOne => {};

  b = parameterOne => {};
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne) {}

  b(parameterOne) {}

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with a single parameter assigned to a function returning an explicit return is provided in a class with a constructor: it handles scenarios where multiple class properties with a single parameter assigned to a function returning an explicit return is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = parameterOne => {
    const value = 1 + 2;
    return value;
  };

  b = parameterOne => {
    const value = 3 + 4;
    return value;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne) {
    const value = 1 + 2;
    return value;
  }

  b(parameterOne) {
    const value = 3 + 4;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with a single parameter assigned to a function returning an explicit return is provided in a class without a constructor: it handles scenarios where multiple class properties with a single parameter assigned to a function returning an explicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = parameterOne => {
    const value = 1 + 2;
    return value;
  };

  b = parameterOne => {
    const value = 3 + 4;
    return value;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne) {
    const value = 1 + 2;
    return value;
  }

  b(parameterOne) {
    const value = 3 + 4;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with a single parameter assigned to a function returning an implicit return is provided in a class without a constructor: it handles scenarios where multiple class properties with a single parameter assigned to a function returning an implicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = parameterOne => parameterOne;

  b = parameterOne => parameterOne;
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne) {
    return parameterOne;
  }

  b(parameterOne) {
    return parameterOne;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with multiple parameters assigned to a function returning a void-returning block is provided in a class without a constructor: it handles scenarios where multiple class properties with multiple parameters assigned to a function returning a void-returning block is provided in a class without a constructor 1`] = `
"
class A {
  a = (parameterOne, parameterTwo) => {
    console.log('hi');
  };

  b = (parameterOne, parameterTwo) => {
    console.log('hi again');
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne, parameterTwo) {
    console.log('hi');
  }

  b(parameterOne, parameterTwo) {
    console.log('hi again');
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with multiple parameters assigned to a function returning an empty block is provided in a class without a constructor: it handles scenarios where multiple class properties with multiple parameters assigned to a function returning an empty block is provided in a class without a constructor 1`] = `
"
class A {
  a = (parameterOne, parameterTwo) => {};

  b = (parameterOne, parameterTwo) => {};
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne, parameterTwo) {}

  b(parameterOne, parameterTwo) {}

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with multiple parameters assigned to a function returning an explicit return is provided in a class with a constructor: it handles scenarios where multiple class properties with multiple parameters assigned to a function returning an explicit return is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = (parameterOne, parameterTwo) => {
    const value = 1 + 2;
    return value;
  };

  b = (parameterOne, parameterTwo) => {
    const value = 3 + 4;
    return value;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne, parameterTwo) {
    const value = 1 + 2;
    return value;
  }

  b(parameterOne, parameterTwo) {
    const value = 3 + 4;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with multiple parameters assigned to a function returning an explicit return is provided in a class without a constructor: it handles scenarios where multiple class properties with multiple parameters assigned to a function returning an explicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = (parameterOne, parameterTwo) => {
    const value = 1 + 2;
    return value;
  };

  b = (parameterOne, parameterTwo) => {
    const value = 3 + 4;
    return value;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne, parameterTwo) {
    const value = 1 + 2;
    return value;
  }

  b(parameterOne, parameterTwo) {
    const value = 3 + 4;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties with multiple parameters assigned to a function returning an implicit return is provided in a class without a constructor: it handles scenarios where multiple class properties with multiple parameters assigned to a function returning an implicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = (parameterOne, parameterTwo) => parameterTwo;

  b = (parameterOne, parameterTwo) => parameterTwo;
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a(parameterOne, parameterTwo) {
    return parameterTwo;
  }

  b(parameterOne, parameterTwo) {
    return parameterTwo;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning a void-returning block is provided in a class with a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning a void-returning block is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = () => {
    console.log('hi');
  };

  b = () => {
    console.log('hi again');
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {
    console.log('hi');
  }

  b() {
    console.log('hi again');
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning a void-returning block is provided in a class without a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning a void-returning block is provided in a class without a constructor 1`] = `
"
class A {
  a = () => {
    console.log('hi');
  };

  b = () => {
    console.log('hi again');
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {
    console.log('hi');
  }

  b() {
    console.log('hi again');
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning an empty block is provided in a class with a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning an empty block is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = () => {};

  b = () => {};
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {}

  b() {}

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning an empty block is provided in a class without a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning an empty block is provided in a class without a constructor 1`] = `
"
class A {
  a = () => {};

  b = () => {};
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {}

  b() {}

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning an explicit return is provided in a class with a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning an explicit return is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = () => {
    const value = 1 + 2;
    return value;
  };

  b = () => {
    const value = 3 + 4;
    return value;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {
    const value = 1 + 2;
    return value;
  }

  b() {
    const value = 3 + 4;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning an explicit return is provided in a class with a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning an explicit return is provided in a class with a constructor 2`] = `
"
class A {
  constructor() {}

  a = () => {
    const value = 1 + 2;
    return value;
  };

  b = () => {
    const value = 3 + 4;
    return value;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {
    const value = 1 + 2;
    return value;
  }

  b() {
    const value = 3 + 4;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning an explicit return is provided in a class without a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning an explicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = () => {
    const value = 1 + 2;
    return value;
  };

  b = () => {
    const value = 3 + 4;
    return value;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {
    const value = 1 + 2;
    return value;
  }

  b() {
    const value = 3 + 4;
    return value;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning an implicit return is provided in a class with a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning an implicit return is provided in a class with a constructor 1`] = `
"
class A {
  constructor() {}

  a = () => 1;

  b = () => 2;
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {
    return 1;
  }

  b() {
    return 2;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios where multiple class properties without parameters assigned to a function returning an implicit return is provided in a class without a constructor: it handles scenarios where multiple class properties without parameters assigned to a function returning an implicit return is provided in a class without a constructor 1`] = `
"
class A {
  a = () => 1;

  b = () => 2;
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
  }

  a() {
    return 1;
  }

  b() {
    return 2;
  }

}
"
`;

exports[`babelPluginTransformClassPropertyArrowFunctions it handles scenarios with many different class property assignments: it handles scenarios with many different class property assignments 1`] = `
"
class A {
  constructor() {}

  a = (parameterOne, parameterTwo) => {
    const value = 1 + 2;
    return value;
  };

  b = (parameterOne, parameterTwo) => {
    const value = 3 + 4;
    return value;
  }

  c = (parameterOne, parameterTwo) => {
    const value = 5 + 6;
    return value;
  }

  d = (parameterOne, parameterTwo) => {
    const value = 7 + 8;
    return value;
  }

  e = (parameterOne, parameterTwo) => {
    const value = 9 + 10;
    return value;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

class A {
  constructor() {
    this.a = this.a.bind(this);
    this.b = this.b.bind(this);
    this.c = this.c.bind(this);
    this.d = this.d.bind(this);
    this.e = this.e.bind(this);
  }

  a(parameterOne, parameterTwo) {
    const value = 1 + 2;
    return value;
  }

  b(parameterOne, parameterTwo) {
    const value = 3 + 4;
    return value;
  }

  c(parameterOne, parameterTwo) {
    const value = 5 + 6;
    return value;
  }

  d(parameterOne, parameterTwo) {
    const value = 7 + 8;
    return value;
  }

  e(parameterOne, parameterTwo) {
    const value = 9 + 10;
    return value;
  }

}
"
`;
